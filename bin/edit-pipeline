#!/usr/bin/env python3
import json
import sys
from optparse import OptionParser
import time
import tempfile
import importlib
import os
from multiprocessing import Process

from lettucethink import fsdb

block_template = """
    "id": "{{id}}",
    "module": "lettucescan.pipeline",
    "class": "{{class}}",
    "inputs": "{{inputs}}",
    "outputs": "{{outputs}}",
    "args": { },
    "requires": []
"""

if os.getenv('EDITOR') is None:
    EDITOR = 'nano'
else:
    EDITOR = os.getenv('EDITOR')

def menu(name, actions):
   
    print("%s:\n"%name)
    for i, x in enumerate(actions):
        print("[%i] %s"%(i,x))
    print("\n")
    res = input("Choice? ")

    try:
        res = int(res)
        print(actions[res])
        return res
    except:
        return menu(name, actions)

def menu_yesno(message, default=False):
    if not default:
        print(message + "[y/N]")
    else:
        print(message + "[Y/n]")

    x = input()
    if x == '':
        return default
    if x == 'y' or x == 'Y':
        return True
    if x == 'n' or x == 'N':
        return False
    else:
        return menu_yesno(message, default)

def edit_block(block):
    with tempfile.TemporaryDirectory() as d:
        fname = os.path.join(d, "value")
        with open(fname, "w") as fh:
            json.dump(block, fh, indent=4)
        os.system('%s %s' % (os.getenv('EDITOR'), fname))
        newval = json.load(open(fname))
    return newval

def apply_change(scan, block_id, newval):
    try:
        x = scan.get_fileset("pipeline", create=False)
        f = x.get_file("pipeline", create=False)
        pipeline = json.loads(f.read_text())
    except:
        print("Warning: no pipeline file in scan")
        return
    blocks = pipeline['blocks']
    for i,b in enumerate(blocks):
        if b['id'] == block_id:
            if newval == '':
                del blocks[i]
            else:
                blocks[i] = newval
            f.write_text('json', json.dumps(pipeline, indent=4))
            return
    print("Warning: could not find block id for change")



if __name__ == "__main__":
    if len(sys.argv) != 2:
        raise Exception('Wrong number of arguments. Type %prog --help for more.')
    scan = sys.argv[1]
    scan = scan.split('/')
    db = '/'.join(scan[:-1])
    scan = scan[-1]
    print('DB location = %s'%db)
    print('scan = %s'%scan)

    db = fsdb.DB(db)
    db.connect()

    scan = db.get_scan(scan)

    x = scan.get_fileset("pipeline", create=False)
    f = x.get_file("pipeline", create=False)
    pipeline = json.loads(f.read_text())

    if f is None:
        raise Exception("No pipeline in scan")

    blocks = [b['id'] for b in pipeline['blocks']]
    j = menu("Which block?", blocks)
    newval = edit_block(pipeline['blocks'][j])
    if newval == "":
        print("Warning: deleting block")
    apply_change(scan, blocks[j], newval)
    ch = menu_yesno("Apply change to all scans in DB?")
    if ch:
        for s in db.get_scans():
            apply_change(s, blocks[j], newval)
