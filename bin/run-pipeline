#!/usr/bin/env python3
import json
import sys
from optparse import OptionParser
import time
import importlib

from lettucethink import fsdb

def process_block(block, scan, inputs, outputs):
    block.read_input(scan, inputs)
    block.process()
    block.write_output(scan, outputs)

def find_id(l, id):
    for x in l:
        if x['id'] == id:
            return x
    return None

if __name__ == "__main__":
    usage = "usage: %prog [options] db/scan"
    parser = OptionParser(usage=usage)

    parser.add_option("-s", "--skip",
        dest="skip",
        default=0,
        type=int,
        help ="skip the first s tasks")

    parser.add_option("-v", "--viz",
        dest="viz",
        default=False,
        help ="save for visualization")

    (options, args) = parser.parse_args()

    if '-n' in sys.argv:
        i = find('-n')

    if len(args) != 1:
        raise Exception('Wrong number of arguments. Type %prog --help for more.')

    scan = args[0]
    scan = scan.split('/')
    db = '/'.join(scan[:-1])
    scan = scan[-1]
    print('DB location = %s'%db)
    print('scan = %s'%scan)

    db = fsdb.DB(db)
    db.connect()

    scan = db.get_scan(scan)

    x = scan.get_fileset("pipeline", create=True)

    pipeline = scan.get_metadata('target_pipeline')
    if pipeline is None:
        raise Exception('No pipeline provided.')



    processed_pipeline = scan.get_metadata('processed_pipeline')
    if processed_pipeline is None:
        processed_pipeline = []

    if options.viz:
        pipeline.append({
            'id' : 'zip',
            'module' : 'romiscan.pipeline',
            'class' : 'VisualizationFiles',
            'inputs' : ['images'],
            'outputs' : 'visualization',
            'args' : {
                'lowres_size' : [1616, 1080],
                'thumbnail_size' : [256, 171]
            }
        })

    tasks = []

    skip = True
    for i,b in enumerate(pipeline):
        if skip:
            if len(processed_pipeline) >= i+1 and processed_pipeline[i] == b:
                continue
            else:
                skip = False
        print("Starting task %s (%i/%i)"%(b['id'], i+1, len(pipeline)))
        module = importlib.import_module(b['module'])
        block = eval('module.%s'%b['class'])(**b["args"])
        process_block(block, scan, b['inputs'], b['outputs'])
        print("done task %s"%b['id'])
        if len(processed_pipeline) == i:
            processed_pipeline.append(b)
        else:
            processed_pipeline[i] = b
        scan.set_metadata('processed_pipeline', processed_pipeline)
