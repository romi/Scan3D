#!/usr/bin/env python3
import lettucethink
import subprocess
from romidata.fsdb import FSDB as DB
from lettucethink import scan
import time
import datetime
import json
import logging
import sys
import appdirs
import os
import math
from optparse import OptionParser

if __name__ == "__main__":
    logger = logging.getLogger(__name__)
    usage = "usage: %prog OBJECT_CONFIG SCANNER_CONFIG PATH_CONFIG DB[/SCAN_ID]"
    parser = OptionParser(usage=usage)

    parser.add_option("-c", "--calibration", dest="calibration",
                      action="store_true", default=False)

    (options, args) = parser.parse_args()

    if len(args) != 4:
        parser.error("Incorrect number of arguments")

    print("Loading object metadata...")
    try:
        object_metadata = json.load(open(args[0]))
    except Exception as e:
        logger.error("Failed to read metadata config file")
        raise
    print("...OK")

    print("Loading scanner config...")
    try:
        scanner_config = json.load(open(args[1]))
    except Exception as e:
        logger.error("Failed to read scanner config file")
        raise

    if scanner_config["cnc_firmware"].split("-")[0] == "grbl":
        from lettucethink.grbl import CNC
    elif scanner_config["cnc_firmware"].split("-")[0] == "cnccontroller":
        from lettucethink.cnccontroller import CNC
    else:
        raise ValueError("Unknown CNC firmware parameter")

    if scanner_config["gimbal_firmware"].split("-")[0] == "dynamixel":
        from lettucethink.dynamixel import Gimbal
    elif scanner_config["gimbal_firmware"].split("-")[0] == "blgimbal":
        from lettucethink.blgimbal import Gimbal
    else:
        raise ValueError("Unknown Gimbal firmware parameter")

    if scanner_config["camera_firmware"].split("-")[0] == "gphoto2":
        from lettucethink.gp2 import Camera
    elif scanner_config["camera_firmware"].split("-")[0] == "sony_wifi":
        from lettucethink.sony import Camera
    else:
        raise ValueError("Unknown Camera firmware parameter")
    print("...OK")

    print("Loading path config...")
    try:
        path_config = json.load(open(args[2]))
        if path_config["type"] == "circular":
            path = lettucethink.path.circle(**path_config["args"])
        else:
            raise ValueError("Unknown path type")
    except Exception as e:
        logger.error("Failed to read path config file")
        raise
    print("...OK")

    db = args[3]
    scan_id = None

    if '/' in db:
        db, scan_id = db.split('/')
    else:
        scan_id = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

    db = DB(db)
    db.connect()

    print("Initializing scanner...")

    if db.get_scan(scan_id) is not None:
        raise Exception("Scan with this id already exists.")

    # Init scanner
    try:
        cnc = CNC(**scanner_config["cnc_args"])
        gimbal = Gimbal(**scanner_config["gimbal_args"])
        camera = Camera(**scanner_config["camera_args"])
        scanner = scan.Scanner(cnc, gimbal, camera, db,
                               scan_id=scan_id, **scanner_config["scanner_args"])
    except Exception as e:
        logger.error("Failed to initialize scanner")
        raise

    print("...OK")

    metadata = {
        "object": object_metadata,
        "scanner": scanner_config,
        "path": path_config
    }

    print("Starting scan...")
    n_line = 20
    try:
        mask = None
        if options.calibration:
            x0, y0, z, pan0, tilt0 = path[0]
            _, y1, _, _, _ = path[len(path)//4-1]
           
            line_1 = lettucethink.path.line([x0, y0, z, pan0, tilt0], [
                                            path_config["args"]["xc"], path_config["args"]["yc"], z, pan0, tilt0], n_line)
            line_2 = lettucethink.path.line([x0, y0, z, pan0, tilt0],
                                            [x0, y1, z, pan0, tilt0],
                                            n_line)
            path = path + line_1 + line_2
            mask = len(path)*[False] + len(line_1)*[True] + len(line_2)*[True]
        scanner.set_path(path, mask)
        scanner.scan(metadata=metadata)

    except Exception as e:
        logger.error("Failed to finish scan.")
        raise
    db.disconnect()
    print("...done. Goodbye!")
