#!/usr/bin/env python3
import argparse
import appdirs
import toml
import pprint
import json
import tempfile
import glob
import os
from warnings import warn
import subprocess


default_luigicmd = "luigi"

default_modules = {
    "Scan": "romiscan.tasks.scan",
    "Clean": "romiscan.tasks.scan",
    "CalibrationScan": "romiscan.tasks.scan",
    "Colmap": "romiscan.tasks.colmap",
    "Undistorted": "romiscan.tasks.proc2d",
    "Masks": "romiscan.tasks.proc2d",
    "Segmentation2D": "romiscan.tasks.proc2d",
    "Voxels": "romiscan.tasks.cl",
    "PointCloud": "romiscan.tasks.proc3d",
    "TriangleMesh": "romiscan.tasks.proc3d",
    "CurveSkeleton": "romiscan.tasks.proc3d",
    "TreeGraph": "romiscan.tasks.arabidopsis",
    "AnglesAndInternodes": "romiscan.tasks.arabidopsis",
    "Visualization": "romiscan.tasks.visualization"
}

parser = argparse.ArgumentParser(description='Run a romiscan task.')


parser.add_argument('--config', dest='config', default=None,
                    help='config location. If a file, reads config from it, if a folder, concatenates all config files in the folder. By default, reads from the scan directory')

parser.add_argument('--luigicmd', dest='luigicmd', default=default_luigicmd,
                    help='luigi command, default: %s'%default_luigicmd)

parser.add_argument('--module', dest='module', default=None,
                    help='module for the task')

parser.add_argument('--log-level', dest='log_level', default='INFO',
                    help='log level ({{log_level}}, INFO (default), WARNING, ERROR, CRITICAL)')

parser.add_argument('task', metavar='task', type=str,
                    help='Luigi task to run')

parser.add_argument('scan', metavar='scan', type=str,
                    help='FSDB Scan to process (path)')

parser.add_argument('--local-scheduler', dest='ls', action="store_true", default=False,
                    help='Luigi CLI argument')


args = parser.parse_args()
config = {}

if args.config is None:
    if args.task == "Scan":
        args.config = os.path.join(args.scan, "scan.toml")
    else:
        args.config = os.path.join(args.scan, "pipeline.toml")

if os.path.isdir(args.config):

    # Read config (json or toml)
    for f in glob.glob(os.path.join(args.config, "*.toml")):
        try:
            c = toml.load(open(f))
            config = {**config, **c}
        except:
            warn("Could not process config file: %s"%f)

    for f in glob.glob(os.path.join(args.config, "*.json")):
        try:
            c = json.load(open(f))
            config = {**config, **c}
        except:
            warn("Could not process config file: %s"%f)
elif os.path.isfile(args.config):
    try:
        c = json.load(open(args.config))
    except:
        try:
            c = toml.load(open(args.config))
        except:
            raise IOError("Could not load config file")
    config = c
else:
    raise IOError("Config file do not exit")

pp = pprint.PrettyPrinter(indent=4)

print("Using the following configuration: ")
pp.pprint(config)

if args.module is not None:
    module = args.module
else:
    module = default_modules[args.task]

assert(args.log_level in ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"])

d = args.scan
if args.task == "Scan":
    try:
        os.mkdir(d)
    except FileExistsError:
        pass
    cfgname = "scan.toml"
else:
    assert(os.path.isdir(d))
    cfgname = "pipeline.toml"


# Save config to scan dir
logging_config = """
[loggers]
keys=root

[logger_root]
handlers=console
qualname=root
level={}

[handlers]
keys=console

[handler_console]
class=logging.StreamHandler
formatter=color
level={}
stream  : ext://sys.stdout

[formatters]
keys=color

[formatter_color]
class=colorlog.ColoredFormatter
format=%(log_color)s%(levelname)-8s%(reset)s %(bg_blue)s[%(name)s]%(reset)s %(message)s from fileConfig
datefmt=%m-%d %H:%M:%S
""".format(args.log_level, args.log_level)

with tempfile.TemporaryDirectory() as tmpd:

    logging_file_path = os.path.join(tmpd, "logging_config.toml")
    with open(logging_file_path, 'w') as f:
        f.write(logging_config)

    file_path = os.path.join(d, cfgname)
    toml.dump(config, open(file_path, 'w'))

    # Set env
    env = {
        "LUIGI_CONFIG_PARSER" : "toml",
        "LUIGI_CONFIG_PATH" : file_path
    }
    # Command
    cmd= [args.luigicmd, "--logging-conf-file", logging_file_path,"--module", module, args.task, "--DatabaseConfig-scan", args.scan]
    if args.ls:
        cmd.append("--local-scheduler")
    subprocess.run(cmd, env={**os.environ, **env})
