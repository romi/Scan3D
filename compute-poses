#!/usr/bin/env python3
from lettucethink import fsdb
from optparse import OptionParser
from processing import parse_colmap
from scanner import localdirs
import numpy as np

from imageio import imwrite, imread
from skimage.util import crop, pad
import subprocess
import os
import sys


if __name__ == "__main__":
    usage = "usage: %prog [options] SCAN_ID"
    parser = OptionParser(usage=usage)

    parser.add_option("-m", "--matcher",
        dest="matcher",
        default="exhaustive",
        help ="matcher to use in colmap (exhaustive or sequential)")

    parser.add_option("-d", "--dense",
        dest="dense", default=False,
        help="compute dense cloud with colmap")

    (options, args) = parser.parse_args()
    if len(args) < 1:
        print("Missing argument : SCAN_ID")
        parser.exit(1)


    scan_id = args[0]

    db_dir = localdirs.db_dir
    db = fsdb.DB(db_dir)
    scan = db.get_scan(scan_id)
    fileset = scan.get_fileset("images")
    fs=fileset.get_files()

    posefile = open("/tmp/poses.txt", mode='w') 

    for i,file in enumerate(fs):
        p = file.get_metadata("pose")
        s = "%s %d %d %d\n"%(file.filename,p[0],p[1],p[2])
        posefile.write(s)

    posefile.close()

    colmap_script = os.path.join(os.getcwd(), "processing/run-colmap.sh")

    scan_dir = os.path.join("/tmp/colmap_ws", scan_id)
    image_dir = os.path.join(scan_dir, "images")
    os.makedirs(image_dir, exist_ok=True)

    for f in fs:
        im = f.read_image()
        imwrite(os.path.join(image_dir, f.filename), im)

    x = subprocess.run([colmap_script, scan_dir,
            options.matcher, str(int(options.dense))], check=True)

    fileset_colmap = scan.get_fileset("colmap")
    if fileset_colmap is None:
        fileset_colmap = scan.create_fileset("colmap")

    images_path = os.path.join(scan_dir, "images.txt")
    cameras_path = os.path.join(scan_dir, "cameras.txt")
    points_path = os.path.join(scan_dir, "points3D.txt")
    dense_path = os.path.join(scan_dir, "dense/dense.ply")

    if not os.path.isfile(images_path):
        raise Exception("Colmap has not produced images.txt file")

    if not os.path.isfile(cameras_path):
        raise Exception("Colmap has not produced cameras.txt file")

    if not os.path.isfile(points_path):
        raise Exception("Colmap has not produced points3D.txt file")

    images = fileset_colmap.get_file("images")
    if images is None:
        images = fileset_colmap.create_file("images")
    images.import_file(images_path)

    cameras = fileset_colmap.get_file("cameras")
    if cameras is None:
        cameras = fileset_colmap.create_file("cameras")
    cameras.import_file(cameras_path)

    points = fileset_colmap.get_file("points")
    if points is None:
        points = fileset_colmap.create_file("points")
    points.import_file(points_path)

    if options.dense:
        dense = fileset_colmap.get_file("dense")
        if dense is None:
            dense = fileset_colmap.create_file("dense")
        dense.import_file(dense_path)

    fileset_colmap.set_metadata("options", vars(options))
